// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  name             String
  email            String             @unique
  password         String?
  phoneNumber      String?            @unique @map("phone_number")
  platformId       Int                @map("platform_id")
  isLocationAgreed Boolean            @default(false) @map("is_location_agreed")
  isEmailAgreed    Boolean            @default(false) @map("is_email_agreed")
  isSmsAgreed      Boolean            @default(false) @map("is_sms_agreed")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(now()) @map("updated_at")
  isDeleted        Boolean            @default(false) @map("is_deleted")
  deletedAt        DateTime?          @map("deleted_at")
  Platform         Platform           @relation(fields: [platformId], references: [id])
  userProfileImage userProfileImage[]
  Partner          Partner[]

  Wishlist    Wishlist[]
  Reservation Reservation[]
  @@map("users")
}

model Platform {
  id   Int    @id @default(autoincrement())
  name String @unique
  User User[]

  @@map("platforms")
}

model userProfileImage {
  id        Int       @id @default(autoincrement())
  imageUrl  String    @map("image_url") @db.VarChar(2000)
  userId    Int       @map("user_id")
  createAt  DateTime  @default(now()) @map("created_at")
  isDeleted Boolean   @default(false)
  deletedAt DateTime? @map("deleted_at")
  User      User      @relation(fields: [userId], references: [id])

  @@map("user_profile_images")
}

model Partner {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  introduce String?
  userId    Int     @unique @map("user_id")
  User      User    @relation(fields: [userId], references: [id])

  Tour   Tour[]
  Ticket Ticket[]
  @@map("partners")
}

model Country {
  id   Int    @id @default(autoincrement())
  name String @unique
  City City[]

  @@map("countries")
}

model City {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  countryId Int     @map("country_id")
  Country   Country @relation(fields: [countryId], references: [id])

  CityImage CityImage[]
  Tour      Tour[]
  Ticket    Ticket[]
  @@map("cities")
}

model CityImage {
  id        Int       @id @default(autoincrement())
  imageUrl  String    @map("image_url") @db.VarChar(2000)
  cityId    Int       @map("city_id")
  createdAt DateTime  @default(now()) @map("created_at")
  isDeleted Boolean   @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at")
  City      City      @relation(fields: [cityId], references: [id])

  @@map("city_images")
}

model ServiceCategory {
  id    Int    @id @default(autoincrement())
  name  String @unique
  query String @unique

  MainCategory MainCategory[]
  @@map("service_categories")
}

model MainCategory {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  query             String          @unique
  serviceCategoryId Int             @map("service_category_id")
  ServiceCategory   ServiceCategory @relation(fields: [serviceCategoryId], references: [id])

  SubCategory SubCategory[]
  @@map("main_categories")
}

model SubCategory {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  query          String       @unique
  mainCategoryId Int          @map("main_category_id")
  MainCategory   MainCategory @relation(fields: [mainCategoryId], references: [id])

  Tour   Tour[]
  Ticket Ticket[]
  @@map("sub_categories")
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  productTypeId Int         @map("product_type_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @map("updated_at")
  isDeleted     Boolean     @default(false) @map("is_deleted")
  deletedAt     DateTime?   @map("deleted_at")
  ProductType   ProductType @relation(fields: [productTypeId], references: [id])

  ProductOption ProductOption[]
  Tour          Tour[]
  Ticket        Ticket[]
  ProductImage  ProductImage[]
  Wishlist      Wishlist[]
  Reservation   Reservation[]
  @@map("products")
}

model ProductType {
  id   Int    @id @default(autoincrement())
  name String @unique

  Product Product[]
  @@map("product_types")
}

model OptionList {
  id   Int    @id @default(autoincrement())
  name String @unique

  ProductOption ProductOption[]
  @@map("option_list")
}

model ProductOption {
  id           Int        @id @default(autoincrement())
  productId    Int        @map("product_id")
  optionListId Int        @map("option_list_id")
  Product      Product    @relation(fields: [productId], references: [id])
  OptionList   OptionList @relation(fields: [optionListId], references: [id])

  @@map("product_options")
}

model ProductImage {
  id          Int       @id @default(autoincrement())
  imageUrl    String    @map("image_url") @db.VarChar(2000)
  imageTypeId Int       @map("image_type_id")
  productId   Int       @map("product_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  isDeleted   Boolean   @default(false) @map("is_deleted")
  deletedAt   DateTime? @map("deleted_at")
  Product     Product   @relation(fields: [productId], references: [id])
  ImageType   ImageType @relation(fields: [imageTypeId], references: [id])

  @@map("product_images")
}

model ImageType {
  id   Int    @id @default(autoincrement())
  name String @unique

  ProductImage ProductImage[]
  @@map("image_types")
}

model Tour {
  id               Int         @id @default(autoincrement())
  price            Float
  discountRate     Float?      @map("discount_rate")
  startDate        DateTime    @map("start_date")
  endDate          DateTime    @map("end_date")
  maximumHeadCount Int         @map("maximum_head_count")
  minimumHeadCount Int         @map("minimum_head_count")
  cityId           Int         @map("city_id")
  subCategoryId    Int         @map("sub_category_id")
  productId        Int         @unique @map("product_id")
  partnerId        Int         @map("partner_id")
  City             City        @relation(fields: [cityId], references: [id])
  Product          Product     @relation(fields: [productId], references: [id])
  SubCategory      SubCategory @relation(fields: [subCategoryId], references: [id])
  Partner          Partner     @relation(fields: [partnerId], references: [id])

  @@map("tours")
}

model Ticket {
  id            Int         @id @default(autoincrement())
  standardPrice Float?      @map("standard_price")
  discountRate  Float?      @map("discount_rate")
  expireDate    DateTime    @map("expire_date")
  cityId        Int         @map("city_id")
  subCategoryId Int         @map("sub_category_id")
  productId     Int         @unique @map("product_id")
  partnerId     Int         @map("partner_id")
  City          City        @relation(fields: [cityId], references: [id])
  Product       Product     @relation(fields: [productId], references: [id])
  SubCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  Partner       Partner     @relation(fields: [partnerId], references: [id])

  TicketOption TicketOption[]
  @@map("tickets")
}

model TicketOption {
  id           Int    @id @default(autoincrement())
  name         String @unique
  price        Float
  discountRate Float? @map("discount_rate")
  ticketId     Int    @map("ticket_id")
  Ticket       Ticket @relation(fields: [ticketId], references: [id])

  @@map("ticket_options")
}

model Wishlist {
  id        Int     @id @default(autoincrement())
  productId Int     @map("product_id")
  userId    Int     @map("user_id")
  Product   Product @relation(fields: [productId], references: [id])
  User      User    @relation(fields: [userId], references: [id])

  @@map("wishlists")
}

model Reservation {
  id            Int         @id @default(autoincrement())
  productId     Int         @map("product_id")
  userId        Int         @map("user_id")
  price         Float
  paymentTypeId Int         @map("payment_type_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  isDeleted     Boolean     @default(false) @map("is_deleted")
  deletedAt     DateTime?   @map("deleted_at")
  Product       Product     @relation(fields: [productId], references: [id])
  User          User        @relation(fields: [userId], references: [id])
  PaymentType   PaymentType @relation(fields: [paymentTypeId], references: [id])

  ReservationTour   ReservationTour[]
  ReservationTicket ReservationTicket[]
  Review            Review[]
  @@map("reservations")
}

model PaymentType {
  id   Int    @id @default(autoincrement())
  name String @unique

  Reservation Reservation[]
  @@map("payment_types")
}

model ReservationTour {
  id            Int         @id @default(autoincrement())
  tourDate      DateTime    @map("tour_date")
  headCount     Int         @map("head_count")
  reservationId Int         @unique @map("reservation_id")
  Reservation   Reservation @relation(fields: [reservationId], references: [id])

  @@map("reservation_tours")
}

model ReservationTicket {
  id            Int         @id @default(autoincrement())
  name          String
  price         Float
  discountRate  Float?      @map("discount_rate")
  count         Int
  reservationId Int         @map("reservation_id")
  Reservation   Reservation @relation(fields: [reservationId], references: [id])

  @@map("reservation_tickets")
}

model Review {
  id            Int         @id @default(autoincrement())
  reservationId Int         @unique @map("reservation_id")
  rating        Int
  content       String      @db.VarChar(1000)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @map("updated_at")
  isDeleted     Boolean     @default(false) @map("is_deleted")
  deletedAt     DateTime?   @map("deleted_at")
  Reservation   Reservation @relation(fields: [reservationId], references: [id])

  ReviewImage ReviewImage[]
  @@map("reviews")
}

model ReviewImage {
  id       Int    @id @default(autoincrement())
  imageUrl String @map("image_url") @db.VarChar(2000)
  reviewId Int    @map("review_id")
  Review   Review @relation(fields: [reviewId], references: [id])

  @@map("review_images")
}
